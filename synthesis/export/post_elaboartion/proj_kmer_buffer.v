
// Generated by Cadence Genus(TM) Synthesis Solution 21.15-s080_1
// Generated on: Aug  7 2024 19:52:39 UTC (Aug  7 2024 19:52:39 UTC)

// Verification Directory fv/proj_kmer_buffer 

module add_unsigned(A, B, Z);
  input [1:0] A;
  input B;
  output [1:0] Z;
  wire [1:0] A;
  wire B;
  wire [1:0] Z;
  wire n_6, n_10, n_14;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_6, A[0], B);
  xnor g12 (Z[1], n_10, n_14);
  not g15 (n_10, n_6);
  not g16 (n_14, A[1]);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_1(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module proj_kmer_buffer(clk, rst_n, in_data, \out_kmer[0] ,
     \out_kmer[1] , \out_kmer[2] , \out_kmer[3] , start_over, full);
  input clk, rst_n, start_over;
  input [1:0] in_data;
  output [1:0] \out_kmer[0] , \out_kmer[1] , \out_kmer[2] ,
       \out_kmer[3] ;
  output full;
  wire clk, rst_n, start_over;
  wire [1:0] in_data;
  wire [1:0] \out_kmer[0] , \out_kmer[1] , \out_kmer[2] , \out_kmer[3] ;
  wire full;
  wire [1:0] buffer_count;
  wire [1:0] buffer_count_nxt;
  wire n_26, n_28, n_29, n_30, n_65;
  add_unsigned add_22_44(.A (buffer_count), .B (1'b1), .Z
       (buffer_count_nxt));
  bmux mux_25_40(.ctl (n_28), .in_0 (1'b0), .in_1 (1'b1), .z (full));
  bmux_1 mux_buffer_count_56_22(.ctl (full), .in_0 (buffer_count_nxt),
       .in_1 (buffer_count), .z ({n_30, n_29}));
  not g1 (n_26, rst_n);
  CDN_flop \kmer_buffer_reg[0][0] (.clk (clk), .d (in_data[0]), .sena
       (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over), .srd
       (1'b0), .q (\out_kmer[0] [0]));
  CDN_flop \kmer_buffer_reg[0][1] (.clk (clk), .d (in_data[1]), .sena
       (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over), .srd
       (1'b0), .q (\out_kmer[0] [1]));
  CDN_flop \kmer_buffer_reg[1][0] (.clk (clk), .d (\out_kmer[0] [0]),
       .sena (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over),
       .srd (1'b0), .q (\out_kmer[1] [0]));
  CDN_flop \kmer_buffer_reg[1][1] (.clk (clk), .d (\out_kmer[0] [1]),
       .sena (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over),
       .srd (1'b0), .q (\out_kmer[1] [1]));
  CDN_flop \kmer_buffer_reg[2][0] (.clk (clk), .d (\out_kmer[1] [0]),
       .sena (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over),
       .srd (1'b0), .q (\out_kmer[2] [0]));
  CDN_flop \kmer_buffer_reg[2][1] (.clk (clk), .d (\out_kmer[1] [1]),
       .sena (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over),
       .srd (1'b0), .q (\out_kmer[2] [1]));
  CDN_flop \kmer_buffer_reg[3][0] (.clk (clk), .d (\out_kmer[2] [0]),
       .sena (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over),
       .srd (1'b0), .q (\out_kmer[3] [0]));
  CDN_flop \kmer_buffer_reg[3][1] (.clk (clk), .d (\out_kmer[2] [1]),
       .sena (1'b1), .aclr (n_26), .apre (1'b0), .srl (start_over),
       .srd (1'b0), .q (\out_kmer[3] [1]));
  CDN_flop \buffer_count_reg[0] (.clk (clk), .d (n_29), .sena (1'b1),
       .aclr (n_26), .apre (1'b0), .srl (start_over), .srd (1'b0), .q
       (buffer_count[0]));
  CDN_flop \buffer_count_reg[1] (.clk (clk), .d (n_30), .sena (1'b1),
       .aclr (n_26), .apre (1'b0), .srl (start_over), .srd (1'b0), .q
       (buffer_count[1]));
  nand g3 (n_65, buffer_count[1], buffer_count[0]);
  not g4 (n_28, n_65);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
