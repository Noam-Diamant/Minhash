
// Generated by Cadence Genus(TM) Synthesis Solution 21.15-s080_1
// Generated on: Aug  8 2024 16:56:16 UTC (Aug  8 2024 16:56:16 UTC)

// Verification Directory fv/proj_extender 

module add_unsigned(A, B, Z);
  input [1:0] A;
  input B;
  output [1:0] Z;
  wire [1:0] A;
  wire B;
  wire [1:0] Z;
  wire n_6, n_10, n_14;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_6, A[0], B);
  xnor g12 (Z[1], n_10, n_14);
  not g15 (n_10, n_6);
  not g16 (n_14, A[1]);
endmodule

module sub_unsigned(A, B, Z);
  input [3:0] A;
  input [1:0] B;
  output [3:0] Z;
  wire [3:0] A;
  wire [1:0] B;
  wire [3:0] Z;
  wire n_14, n_17, n_21, n_23, n_24, n_25, n_26, n_27;
  wire n_28, n_29, n_30, n_32, n_34, n_37;
  not g4 (n_14, B[1]);
  not g5 (n_17, B[0]);
  xor g1 (n_37, A[0], n_17);
  nand g7 (n_24, n_21, B[0]);
  nor g8 (n_23, A[1], n_14);
  nand g9 (n_26, A[1], n_14);
  not g11 (n_25, n_23);
  nand g12 (n_27, n_24, n_25);
  nand g13 (n_29, n_26, n_27);
  nand g20 (n_34, n_28, n_30);
  nand g23 (n_32, n_25, n_26);
  xnor g24 (Z[1], n_24, n_32);
  xnor g26 (Z[2], n_29, A[2]);
  xnor g29 (Z[3], n_34, A[3]);
  not g31 (n_21, A[0]);
  not g33 (n_28, A[2]);
  not g35 (Z[0], n_37);
  not g36 (n_30, n_29);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_3(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_5(ctl, in_0, in_1, z);
  input ctl;
  input [2:0] in_0, in_1;
  output [2:0] z;
  wire ctl;
  wire [2:0] in_0, in_1;
  wire [2:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module case_box(in_0, out_0);
  input [1:0] in_0;
  output [2:0] out_0;
  wire [1:0] in_0;
  wire [2:0] out_0;
  wire n_3, n_5, n_14, n_15;
  assign out_0[0] = in_0[1];
  not g5 (n_3, in_0[1]);
  nand g1 (n_5, n_14, n_3);
  nand g2 (n_15, in_0[0], n_3);
  not g3 (out_0[2], n_5);
  not g4 (out_0[1], n_15);
  not g8 (n_14, in_0[0]);
endmodule

module mux(ctl, in_0, in_1, z);
  input [1:0] ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire [1:0] ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_mux2 g1(.sel0 (ctl[1]), .data0 (in_0[3]), .sel1 (ctl[0]), .data1
       (in_1[3]), .z (z[3]));
  CDN_mux2 g2(.sel0 (ctl[1]), .data0 (in_0[2]), .sel1 (ctl[0]), .data1
       (in_1[2]), .z (z[2]));
  CDN_mux2 g3(.sel0 (ctl[1]), .data0 (in_0[1]), .sel1 (ctl[0]), .data1
       (in_1[1]), .z (z[1]));
  CDN_mux2 g4(.sel0 (ctl[1]), .data0 (in_0[0]), .sel1 (ctl[0]), .data1
       (in_1[0]), .z (z[0]));
endmodule

module case_box_4(in_0, out_0);
  input [1:0] in_0;
  output [3:0] out_0;
  wire [1:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_15, n_23, n_24, n_25, n_26;
  nand g1 (n_9, n_23, n_24);
  nand g2 (n_25, in_0[0], n_24);
  nand g3 (n_26, n_23, in_0[1]);
  nand g4 (n_15, in_0[0], in_0[1]);
  not g5 (out_0[3], n_9);
  not g6 (out_0[2], n_25);
  not g7 (out_0[1], n_26);
  not g8 (out_0[0], n_15);
  not g11 (n_24, in_0[1]);
  not g12 (n_23, in_0[0]);
endmodule

module mux_9(ctl, in_0, in_1, in_2, in_3, z);
  input [3:0] ctl, in_0, in_1, in_2, in_3;
  output [3:0] z;
  wire [3:0] ctl, in_0, in_1, in_2, in_3;
  wire [3:0] z;
  CDN_mux4 g1(.sel0 (ctl[3]), .data0 (in_0[3]), .sel1 (ctl[2]), .data1
       (in_1[3]), .sel2 (ctl[1]), .data2 (in_2[3]), .sel3 (ctl[0]),
       .data3 (in_3[3]), .z (z[3]));
  CDN_mux4 g2(.sel0 (ctl[3]), .data0 (in_0[2]), .sel1 (ctl[2]), .data1
       (in_1[2]), .sel2 (ctl[1]), .data2 (in_2[2]), .sel3 (ctl[0]),
       .data3 (in_3[2]), .z (z[2]));
  CDN_mux4 g3(.sel0 (ctl[3]), .data0 (in_0[1]), .sel1 (ctl[2]), .data1
       (in_1[1]), .sel2 (ctl[1]), .data2 (in_2[1]), .sel3 (ctl[0]),
       .data3 (in_3[1]), .z (z[1]));
  CDN_mux4 g4(.sel0 (ctl[3]), .data0 (in_0[0]), .sel1 (ctl[2]), .data1
       (in_1[0]), .sel2 (ctl[1]), .data2 (in_2[0]), .sel3 (ctl[0]),
       .data3 (in_3[0]), .z (z[0]));
endmodule

module case_box_7(in_0, out_0);
  input [1:0] in_0;
  output [3:0] out_0;
  wire [1:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_15, n_23, n_24, n_25, n_26;
  nand g1 (n_9, n_23, n_24);
  nand g2 (n_25, in_0[0], n_24);
  nand g3 (n_26, n_23, in_0[1]);
  nand g4 (n_15, in_0[0], in_0[1]);
  not g5 (out_0[3], n_9);
  not g6 (out_0[2], n_25);
  not g7 (out_0[1], n_26);
  not g8 (out_0[0], n_15);
  not g11 (n_24, in_0[1]);
  not g12 (n_23, in_0[0]);
endmodule

module case_box_10(in_0, out_0);
  input [1:0] in_0;
  output [3:0] out_0;
  wire [1:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_15, n_23, n_24, n_25, n_26;
  nand g1 (n_9, n_23, n_24);
  nand g2 (n_25, in_0[0], n_24);
  nand g3 (n_26, n_23, in_0[1]);
  nand g4 (n_15, in_0[0], in_0[1]);
  not g5 (out_0[3], n_9);
  not g6 (out_0[2], n_25);
  not g7 (out_0[1], n_26);
  not g8 (out_0[0], n_15);
  not g11 (n_24, in_0[1]);
  not g12 (n_23, in_0[0]);
endmodule

module mux_11(ctl, in_0, in_1, in_2, in_3, z);
  input [3:0] ctl;
  input [2:0] in_0, in_1, in_2, in_3;
  output [2:0] z;
  wire [3:0] ctl;
  wire [2:0] in_0, in_1, in_2, in_3;
  wire [2:0] z;
  CDN_mux4 g1(.sel0 (ctl[3]), .data0 (in_0[2]), .sel1 (ctl[2]), .data1
       (in_1[2]), .sel2 (ctl[1]), .data2 (in_2[2]), .sel3 (ctl[0]),
       .data3 (in_3[2]), .z (z[2]));
  CDN_mux4 g2(.sel0 (ctl[3]), .data0 (in_0[1]), .sel1 (ctl[2]), .data1
       (in_1[1]), .sel2 (ctl[1]), .data2 (in_2[1]), .sel3 (ctl[0]),
       .data3 (in_3[1]), .z (z[1]));
  CDN_mux4 g3(.sel0 (ctl[3]), .data0 (in_0[0]), .sel1 (ctl[2]), .data1
       (in_1[0]), .sel2 (ctl[1]), .data2 (in_2[0]), .sel3 (ctl[0]),
       .data3 (in_3[0]), .z (z[0]));
endmodule

module proj_extender(in_fragment, \in_kmer_indices[0] ,
     \in_kmer_indices[1] , \in_kmer_indices[2] , \in_kmer_indices[3] ,
     valid_indices, rst_n, clk, out_index, out_gfm);
  input [7:0] in_fragment;
  input [2:0] \in_kmer_indices[0] , \in_kmer_indices[1] ,
       \in_kmer_indices[2] , \in_kmer_indices[3] ;
  input valid_indices, rst_n, clk;
  output [3:0] out_index;
  output [7:0] out_gfm;
  wire [7:0] in_fragment;
  wire [2:0] \in_kmer_indices[0] , \in_kmer_indices[1] ,
       \in_kmer_indices[2] , \in_kmer_indices[3] ;
  wire valid_indices, rst_n, clk;
  wire [3:0] out_index;
  wire [7:0] out_gfm;
  wire [-1:0] frag_parts_idx;
  wire [1:0] indices_idx;
  wire [2:0] curr_index;
  wire [1:0] indices_idx_next;
  wire [2:0] \in_kmer_indices_r[3] ;
  wire [2:0] \in_kmer_indices_r[2] ;
  wire [2:0] \in_kmer_indices_r[1] ;
  wire [2:0] \in_kmer_indices_r[0] ;
  wire [3:0] frag_part;
  wire UNCONNECTED, n_47, n_48, n_49, n_50, n_64, n_65, n_74;
  wire n_75, n_76, n_77, n_78, n_79, n_80, n_81, n_82;
  wire n_83, n_84, n_85, n_86, n_87, n_90, n_91, n_92;
  wire n_93, n_94, n_95, n_96, n_97, n_98, n_99, n_100;
  wire n_101, n_158, n_159, n_160, rst_frag_parts_idx;
  add_unsigned add_49_77(.A (frag_parts_idx), .B (1'b1), .Z ({n_87,
       n_86}));
  add_unsigned add_70_64(.A (indices_idx), .B (1'b1), .Z ({n_50,
       n_49}));
  sub_unsigned sub_72_43(.A ({1'b0, curr_index}), .B (2'b10), .Z
       (out_index));
  bmux mux_47_49(.ctl (n_48), .in_0 (1'b0), .in_1 (1'b1), .z
       (rst_frag_parts_idx));
  bmux_3 mux_70_31(.ctl (rst_frag_parts_idx), .in_0 (indices_idx),
       .in_1 ({n_50, n_49}), .z (indices_idx_next));
  bmux_5 \mux_in_kmer_indices_r[3]_84_13 (.ctl (valid_indices), .in_0
       (\in_kmer_indices_r[3] ), .in_1 (\in_kmer_indices[3] ), .z
       ({n_101, n_100, n_99}));
  bmux_5 \mux_in_kmer_indices_r[2]_84_13 (.ctl (valid_indices), .in_0
       (\in_kmer_indices_r[2] ), .in_1 (\in_kmer_indices[2] ), .z
       ({n_98, n_97, n_96}));
  bmux_5 \mux_in_kmer_indices_r[1]_84_13 (.ctl (valid_indices), .in_0
       (\in_kmer_indices_r[1] ), .in_1 (\in_kmer_indices[1] ), .z
       ({n_95, n_94, n_93}));
  bmux_5 \mux_in_kmer_indices_r[0]_84_13 (.ctl (valid_indices), .in_0
       (\in_kmer_indices_r[0] ), .in_1 (\in_kmer_indices[0] ), .z
       ({n_92, n_91, n_90}));
  case_box ctl_frag_parts_idx_53_46(.in_0 (frag_parts_idx), .out_0
       ({n_64, n_65, UNCONNECTED}));
  mux mux_in_fragment_53_24(.ctl ({n_64, n_65}), .in_0
       (in_fragment[3:0]), .in_1 (in_fragment[7:4]), .z (frag_part));
  case_box_4 ctl_frag_part_58_23(.in_0 (frag_part[1:0]), .out_0 ({n_74,
       n_75, n_76, n_77}));
  mux_9 mux_out_gfm_58_23(.ctl ({n_74, n_75, n_76, n_77}), .in_0
       (4'b1), .in_1 (4'b10), .in_2 (4'b100), .in_3 (4'b1000), .z
       (out_gfm[3:0]));
  case_box_7 ctl_frag_part_58_12(.in_0 (frag_part[3:2]), .out_0 ({n_78,
       n_79, n_80, n_81}));
  mux_9 mux_out_gfm_58_13(.ctl ({n_78, n_79, n_80, n_81}), .in_0
       (4'b1), .in_1 (4'b10), .in_2 (4'b100), .in_3 (4'b1000), .z
       (out_gfm[7:4]));
  case_box_10 ctl_indices_idx_51_25(.in_0 (indices_idx), .out_0 ({n_82,
       n_83, n_84, n_85}));
  mux_11 \mux_in_kmer_indices_r[indices_idx]_51_25 (.ctl ({n_82, n_83,
       n_84, n_85}), .in_0 (\in_kmer_indices_r[0] ), .in_1
       (\in_kmer_indices_r[1] ), .in_2 (\in_kmer_indices_r[2] ), .in_3
       (\in_kmer_indices_r[3] ), .z (curr_index));
  not g1 (n_47, rst_n);
  CDN_flop \frag_parts_idx_reg[0] (.clk (clk), .d (n_86), .sena (1'b1),
       .aclr (n_47), .apre (1'b0), .srl (rst_frag_parts_idx), .srd
       (1'b0), .q (frag_parts_idx[0]));
  CDN_flop \frag_parts_idx_reg[-1] (.clk (clk), .d (n_87), .sena
       (1'b1), .aclr (n_47), .apre (1'b0), .srl (rst_frag_parts_idx),
       .srd (1'b0), .q (frag_parts_idx[-1]));
  CDN_flop \in_kmer_indices_r_reg[0][0] (.clk (clk), .d (n_90), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [0]));
  CDN_flop \in_kmer_indices_r_reg[0][1] (.clk (clk), .d (n_91), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [1]));
  CDN_flop \in_kmer_indices_r_reg[0][2] (.clk (clk), .d (n_92), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [2]));
  CDN_flop \in_kmer_indices_r_reg[1][0] (.clk (clk), .d (n_93), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [0]));
  CDN_flop \in_kmer_indices_r_reg[1][1] (.clk (clk), .d (n_94), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [1]));
  CDN_flop \in_kmer_indices_r_reg[1][2] (.clk (clk), .d (n_95), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [2]));
  CDN_flop \in_kmer_indices_r_reg[2][0] (.clk (clk), .d (n_96), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [0]));
  CDN_flop \in_kmer_indices_r_reg[2][1] (.clk (clk), .d (n_97), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [1]));
  CDN_flop \in_kmer_indices_r_reg[2][2] (.clk (clk), .d (n_98), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [2]));
  CDN_flop \in_kmer_indices_r_reg[3][0] (.clk (clk), .d (n_99), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [0]));
  CDN_flop \in_kmer_indices_r_reg[3][1] (.clk (clk), .d (n_100), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [1]));
  CDN_flop \in_kmer_indices_r_reg[3][2] (.clk (clk), .d (n_101), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [2]));
  CDN_flop \indices_idx_reg[0] (.clk (clk), .d (indices_idx_next[0]),
       .sena (1'b1), .aclr (n_47), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (indices_idx[0]));
  CDN_flop \indices_idx_reg[1] (.clk (clk), .d (indices_idx_next[1]),
       .sena (1'b1), .aclr (n_47), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (indices_idx[1]));
  not g2 (n_159, frag_parts_idx[-1]);
  nand g3 (n_160, n_158, n_159);
  not g4 (n_48, n_160);
  not g15 (n_158, frag_parts_idx[0]);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux2(sel0, data0, sel1, data1, z);
  input sel0, data0, sel1, data1;
  output z;
  wire sel0, data0, sel1, data1;
  reg  z;
  always 
    @(sel0 or sel1 or data0 or data1) 
      case ({sel0, sel1})
       2'b10: z = data0;
       2'b01: z = data1;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux2(sel0, data0, sel1, data1, z);
  input sel0, data0, sel1, data1;
  output z;
  wire sel0, data0, sel1, data1;
  wire z;
  wire w_0, w_1;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux4(sel0, data0, sel1, data1, sel2, data2, sel3, data3, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or data0 or data1 or data2 or data3) 
      case ({sel0, sel1, sel2, sel3})
       4'b1000: z = data0;
       4'b0100: z = data1;
       4'b0010: z = data2;
       4'b0001: z = data3;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux4(sel0, data0, sel1, data1, sel2, data2, sel3, data3, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  wire z;
  wire w_0, w_1, w_2, w_3;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  or org (z, w_0, w_1, w_2, w_3);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
