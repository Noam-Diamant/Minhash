
// Generated by Cadence Genus(TM) Synthesis Solution 21.15-s080_1
// Generated on: Aug  9 2024 12:36:36 UTC (Aug  9 2024 12:36:36 UTC)

// Verification Directory fv/proj_counter 

module equal_unsigned(A, B, Z);
  input [31:0] A;
  input [4:0] B;
  output Z;
  wire [31:0] A;
  wire [4:0] B;
  wire Z;
  wire n_39, n_40, n_41, n_42, n_43, n_44, n_45, n_46;
  wire n_47, n_48, n_49, n_50, n_51, n_52, n_54;
  xnor g1 (n_54, A[0], B[0]);
  xnor g2 (n_39, A[1], B[1]);
  xnor g3 (n_40, A[2], B[2]);
  xnor g4 (n_41, A[3], B[3]);
  xnor g5 (n_42, A[4], B[4]);
  nor g6 (n_43, A[31], A[30], A[29], A[28]);
  nor g7 (n_44, A[27], A[26], A[25], A[24]);
  nor g8 (n_45, A[23], A[22], A[21], A[20]);
  nor g9 (n_46, A[19], A[18], A[17], A[16]);
  nor g10 (n_47, A[15], A[14], A[13], A[12]);
  nor g11 (n_48, A[11], A[10], A[9], A[8]);
  nor g12 (n_49, A[7], A[6], A[5]);
  nand g13 (n_50, n_54, n_39, n_40, n_41);
  nand g14 (n_51, n_42, n_43, n_44, n_45);
  nand g15 (n_52, n_46, n_47, n_48, n_49);
  nor g16 (Z, n_50, n_51, n_52);
endmodule

module add_unsigned(A, B, Z);
  input [31:0] A;
  input B;
  output [31:0] Z;
  wire [31:0] A;
  wire B;
  wire [31:0] Z;
  wire n_66, n_70, n_73, n_75, n_79, n_81, n_85, n_87;
  wire n_91, n_93, n_97, n_99, n_103, n_105, n_109, n_111;
  wire n_115, n_117, n_121, n_123, n_127, n_129, n_133, n_135;
  wire n_139, n_141, n_145, n_147, n_151, n_153, n_157, n_159;
  wire n_163, n_164, n_166, n_167, n_169, n_173, n_175, n_183;
  wire n_185, n_193, n_195, n_203, n_205, n_213, n_215, n_223;
  wire n_225, n_233, n_240, n_242, n_243, n_244, n_245, n_247;
  wire n_248, n_249, n_251, n_255, n_256, n_259, n_263, n_270;
  wire n_271, n_274, n_278, n_285, n_286, n_289, n_297, n_299;
  wire n_300, n_301, n_302, n_304, n_305, n_306, n_307, n_309;
  wire n_310, n_312, n_313, n_315, n_316, n_318, n_322, n_327;
  wire n_331, n_334, n_335, n_340, n_345, n_355, n_357, n_358;
  wire n_359, n_360, n_362, n_363, n_364, n_365, n_367, n_368;
  wire n_370, n_371, n_373, n_374, n_375, n_376, n_378, n_379;
  wire n_380, n_382, n_383, n_384, n_386, n_387, n_388, n_390;
  wire n_391, n_392, n_394, n_395, n_396, n_398, n_399, n_400;
  wire n_402, n_407, n_412, n_418, n_421, n_425, n_431, n_434;
  wire n_438, n_442, n_446, n_449, n_453, n_459, n_462, n_466;
  wire n_470, n_474, n_477, n_481, n_484, n_488, n_491, n_495;
  wire n_499, n_503, n_506, n_510;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_66, A[0], B);
  nand g69 (n_73, n_70, A[1]);
  nor g74 (n_167, n_79, n_75);
  nor g78 (n_173, n_85, n_81);
  nor g82 (n_175, n_91, n_87);
  nor g86 (n_183, n_97, n_93);
  nor g90 (n_185, n_103, n_99);
  nor g94 (n_193, n_109, n_105);
  nor g98 (n_195, n_115, n_111);
  nor g102 (n_203, n_121, n_117);
  nor g106 (n_205, n_127, n_123);
  nor g110 (n_213, n_133, n_129);
  nor g114 (n_215, n_139, n_135);
  nor g118 (n_223, n_145, n_141);
  nor g122 (n_225, n_151, n_147);
  nor g126 (n_233, n_157, n_153);
  nand g132 (n_166, n_164, A[2]);
  nand g134 (n_169, n_167, n_164);
  nand g140 (n_244, n_173, A[6]);
  nand g145 (n_248, n_173, n_175);
  nand g150 (n_301, n_183, A[10]);
  nand g155 (n_255, n_183, n_185);
  nand g160 (n_259, n_193, A[14]);
  nand g165 (n_263, n_193, n_195);
  nand g170 (n_359, n_203, A[18]);
  nand g175 (n_270, n_203, n_205);
  nand g180 (n_274, n_213, A[22]);
  nand g185 (n_278, n_213, n_215);
  nand g190 (n_327, n_223, A[26]);
  nand g195 (n_285, n_223, n_225);
  nand g200 (n_289, n_233, A[30]);
  nand g207 (n_242, n_240, A[4]);
  nand g209 (n_243, n_173, n_240);
  not g211 (n_245, n_244);
  nand g212 (n_247, n_240, n_245);
  not g214 (n_249, n_248);
  nand g215 (n_251, n_240, n_249);
  nor g220 (n_307, n_109, n_255);
  not g221 (n_256, n_193);
  nor g225 (n_310, n_255, n_256);
  nor g229 (n_313, n_255, n_259);
  nor g233 (n_316, n_255, n_263);
  nor g237 (n_365, n_133, n_270);
  not g238 (n_271, n_213);
  nor g242 (n_368, n_270, n_271);
  nor g246 (n_371, n_270, n_274);
  nor g250 (n_322, n_270, n_278);
  nor g254 (n_335, n_157, n_285);
  not g255 (n_286, n_233);
  nor g259 (n_340, n_285, n_286);
  nor g263 (n_345, n_285, n_289);
  nand g269 (n_299, n_297, A[8]);
  nand g271 (n_300, n_183, n_297);
  not g273 (n_302, n_301);
  nand g274 (n_304, n_297, n_302);
  not g276 (n_305, n_255);
  nand g277 (n_306, n_297, n_305);
  nand g279 (n_309, n_307, n_297);
  nand g281 (n_312, n_310, n_297);
  nand g283 (n_315, n_313, n_297);
  nand g285 (n_318, n_316, n_297);
  nand g291 (n_375, n_322, A[24]);
  nand g296 (n_379, n_223, n_322);
  not g300 (n_331, n_327);
  nand g301 (n_383, n_322, n_331);
  not g305 (n_334, n_285);
  nand g306 (n_387, n_322, n_334);
  nand g311 (n_391, n_322, n_335);
  nand g316 (n_395, n_322, n_340);
  nand g321 (n_399, n_322, n_345);
  nand g328 (n_357, n_355, A[16]);
  nand g330 (n_358, n_203, n_355);
  not g332 (n_360, n_359);
  nand g333 (n_362, n_355, n_360);
  not g335 (n_363, n_270);
  nand g336 (n_364, n_355, n_363);
  nand g338 (n_367, n_365, n_355);
  nand g340 (n_370, n_368, n_355);
  nand g342 (n_373, n_371, n_355);
  nand g344 (n_374, n_322, n_355);
  not g346 (n_376, n_375);
  nand g347 (n_378, n_355, n_376);
  not g349 (n_380, n_379);
  nand g350 (n_382, n_355, n_380);
  not g352 (n_384, n_383);
  nand g353 (n_386, n_355, n_384);
  not g355 (n_388, n_387);
  nand g356 (n_390, n_355, n_388);
  not g358 (n_392, n_391);
  nand g359 (n_394, n_355, n_392);
  not g361 (n_396, n_395);
  nand g362 (n_398, n_355, n_396);
  not g364 (n_400, n_399);
  nand g365 (n_402, n_355, n_400);
  xnor g371 (Z[1], n_70, n_407);
  xnor g373 (Z[2], n_164, n_79);
  xnor g376 (Z[3], n_412, n_75);
  xnor g378 (Z[4], n_240, n_85);
  xnor g381 (Z[5], n_418, n_81);
  xnor g383 (Z[6], n_421, n_91);
  xnor g386 (Z[7], n_425, n_87);
  xnor g388 (Z[8], n_297, n_97);
  xnor g391 (Z[9], n_431, n_93);
  xnor g393 (Z[10], n_434, n_103);
  xnor g396 (Z[11], n_438, n_99);
  xnor g399 (Z[12], n_442, n_109);
  xnor g402 (Z[13], n_446, n_105);
  xnor g404 (Z[14], n_449, n_115);
  xnor g407 (Z[15], n_453, n_111);
  xnor g409 (Z[16], n_355, n_121);
  xnor g412 (Z[17], n_459, n_117);
  xnor g414 (Z[18], n_462, n_127);
  xnor g417 (Z[19], n_466, n_123);
  xnor g420 (Z[20], n_470, n_133);
  xnor g423 (Z[21], n_474, n_129);
  xnor g425 (Z[22], n_477, n_139);
  xnor g428 (Z[23], n_481, n_135);
  xnor g430 (Z[24], n_484, n_145);
  xnor g433 (Z[25], n_488, n_141);
  xnor g435 (Z[26], n_491, n_151);
  xnor g438 (Z[27], n_495, n_147);
  xnor g441 (Z[28], n_499, n_157);
  xnor g444 (Z[29], n_503, n_153);
  xnor g446 (Z[30], n_506, n_163);
  xnor g449 (Z[31], n_510, n_159);
  not g452 (n_79, A[2]);
  not g453 (n_75, A[3]);
  not g454 (n_85, A[4]);
  not g455 (n_81, A[5]);
  not g456 (n_91, A[6]);
  not g457 (n_87, A[7]);
  not g458 (n_97, A[8]);
  not g459 (n_93, A[9]);
  not g460 (n_103, A[10]);
  not g461 (n_99, A[11]);
  not g462 (n_109, A[12]);
  not g463 (n_105, A[13]);
  not g464 (n_115, A[14]);
  not g465 (n_111, A[15]);
  not g466 (n_121, A[16]);
  not g467 (n_117, A[17]);
  not g468 (n_127, A[18]);
  not g469 (n_123, A[19]);
  not g470 (n_133, A[20]);
  not g471 (n_129, A[21]);
  not g472 (n_139, A[22]);
  not g473 (n_135, A[23]);
  not g474 (n_145, A[24]);
  not g475 (n_141, A[25]);
  not g476 (n_151, A[26]);
  not g477 (n_147, A[27]);
  not g478 (n_157, A[28]);
  not g479 (n_153, A[29]);
  not g480 (n_163, A[30]);
  not g481 (n_159, A[31]);
  not g482 (n_70, n_66);
  not g483 (n_407, A[1]);
  not g484 (n_164, n_73);
  not g485 (n_412, n_166);
  not g486 (n_240, n_169);
  not g487 (n_418, n_242);
  not g488 (n_421, n_243);
  not g489 (n_425, n_247);
  not g490 (n_297, n_251);
  not g491 (n_431, n_299);
  not g492 (n_434, n_300);
  not g493 (n_438, n_304);
  not g494 (n_442, n_306);
  not g495 (n_446, n_309);
  not g496 (n_449, n_312);
  not g497 (n_453, n_315);
  not g498 (n_355, n_318);
  not g499 (n_459, n_357);
  not g500 (n_462, n_358);
  not g501 (n_466, n_362);
  not g502 (n_470, n_364);
  not g503 (n_474, n_367);
  not g504 (n_477, n_370);
  not g505 (n_481, n_373);
  not g506 (n_484, n_374);
  not g507 (n_488, n_378);
  not g508 (n_491, n_382);
  not g509 (n_495, n_386);
  not g510 (n_499, n_390);
  not g511 (n_503, n_394);
  not g512 (n_506, n_398);
  not g513 (n_510, n_402);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_1(ctl, in_0, in_1, z);
  input ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module proj_counter(index, finished_count, clk, rst_n);
  input clk, rst_n;
  output [31:0] index;
  output finished_count;
  wire clk, rst_n;
  wire [31:0] index;
  wire finished_count;
  wire [31:0] idx_next;
  wire n_73, n_74, n_75, n_76, n_77, n_78, n_79, n_80;
  wire n_81, n_82, n_83, n_84, n_85, n_86, n_87, n_88;
  wire n_89, n_90, n_91, n_92, n_93, n_94, n_95, n_96;
  wire n_97, n_98, n_99, n_100, n_101, n_102, n_103, n_104;
  wire n_105, n_107, rst_index;
  equal_unsigned eq_28_38(.A (index), .B (5'b11111), .Z (n_73));
  add_unsigned add_32_55(.A (index), .B (1'b1), .Z ({n_105, n_104,
       n_103, n_102, n_101, n_100, n_99, n_98, n_97, n_96, n_95, n_94,
       n_93, n_92, n_91, n_90, n_89, n_88, n_87, n_86, n_85, n_84,
       n_83, n_82, n_81, n_80, n_79, n_78, n_77, n_76, n_75, n_74}));
  bmux mux_28_38(.ctl (n_73), .in_0 (1'b0), .in_1 (1'b1), .z
       (finished_count));
  bmux_1 mux_32_23(.ctl (finished_count), .in_0 ({n_105, n_104, n_103,
       n_102, n_101, n_100, n_99, n_98, n_97, n_96, n_95, n_94, n_93,
       n_92, n_91, n_90, n_89, n_88, n_87, n_86, n_85, n_84, n_83,
       n_82, n_81, n_80, n_79, n_78, n_77, n_76, n_75, n_74}), .in_1
       (32'b0), .z (idx_next));
  not g1 (n_107, rst_n);
  or g2 (rst_index, finished_count, n_107);
  CDN_flop \out_index_reg[0] (.clk (clk), .d (idx_next[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[0]));
  CDN_flop \out_index_reg[1] (.clk (clk), .d (idx_next[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[1]));
  CDN_flop \out_index_reg[2] (.clk (clk), .d (idx_next[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[2]));
  CDN_flop \out_index_reg[3] (.clk (clk), .d (idx_next[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[3]));
  CDN_flop \out_index_reg[4] (.clk (clk), .d (idx_next[4]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[4]));
  CDN_flop \out_index_reg[5] (.clk (clk), .d (idx_next[5]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[5]));
  CDN_flop \out_index_reg[6] (.clk (clk), .d (idx_next[6]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[6]));
  CDN_flop \out_index_reg[7] (.clk (clk), .d (idx_next[7]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[7]));
  CDN_flop \out_index_reg[8] (.clk (clk), .d (idx_next[8]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[8]));
  CDN_flop \out_index_reg[9] (.clk (clk), .d (idx_next[9]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[9]));
  CDN_flop \out_index_reg[10] (.clk (clk), .d (idx_next[10]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[10]));
  CDN_flop \out_index_reg[11] (.clk (clk), .d (idx_next[11]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[11]));
  CDN_flop \out_index_reg[12] (.clk (clk), .d (idx_next[12]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[12]));
  CDN_flop \out_index_reg[13] (.clk (clk), .d (idx_next[13]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[13]));
  CDN_flop \out_index_reg[14] (.clk (clk), .d (idx_next[14]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[14]));
  CDN_flop \out_index_reg[15] (.clk (clk), .d (idx_next[15]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[15]));
  CDN_flop \out_index_reg[16] (.clk (clk), .d (idx_next[16]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[16]));
  CDN_flop \out_index_reg[17] (.clk (clk), .d (idx_next[17]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[17]));
  CDN_flop \out_index_reg[18] (.clk (clk), .d (idx_next[18]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[18]));
  CDN_flop \out_index_reg[19] (.clk (clk), .d (idx_next[19]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[19]));
  CDN_flop \out_index_reg[20] (.clk (clk), .d (idx_next[20]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[20]));
  CDN_flop \out_index_reg[21] (.clk (clk), .d (idx_next[21]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[21]));
  CDN_flop \out_index_reg[22] (.clk (clk), .d (idx_next[22]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[22]));
  CDN_flop \out_index_reg[23] (.clk (clk), .d (idx_next[23]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[23]));
  CDN_flop \out_index_reg[24] (.clk (clk), .d (idx_next[24]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[24]));
  CDN_flop \out_index_reg[25] (.clk (clk), .d (idx_next[25]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[25]));
  CDN_flop \out_index_reg[26] (.clk (clk), .d (idx_next[26]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[26]));
  CDN_flop \out_index_reg[27] (.clk (clk), .d (idx_next[27]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[27]));
  CDN_flop \out_index_reg[28] (.clk (clk), .d (idx_next[28]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[28]));
  CDN_flop \out_index_reg[29] (.clk (clk), .d (idx_next[29]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[29]));
  CDN_flop \out_index_reg[30] (.clk (clk), .d (idx_next[30]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[30]));
  CDN_flop \out_index_reg[31] (.clk (clk), .d (idx_next[31]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (rst_index), .srd
       (1'b0), .q (index[31]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
