
// Generated by Cadence Genus(TM) Synthesis Solution 21.15-s080_1
// Generated on: Aug 11 2024 13:48:49 UTC (Aug 11 2024 13:48:49 UTC)

// Verification Directory fv/proj_extender 

module add_unsigned(A, B, Z);
  input A, B;
  output Z;
  wire A, B;
  wire Z;
  xor g1 (Z, A, B);
endmodule

module add_unsigned_2(A, B, Z);
  input [1:0] A;
  input B;
  output [1:0] Z;
  wire [1:0] A;
  wire B;
  wire [1:0] Z;
  wire n_6, n_10, n_14;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_6, A[0], B);
  xnor g12 (Z[1], n_10, n_14);
  not g15 (n_10, n_6);
  not g16 (n_14, A[1]);
endmodule

module sub_unsigned(A, B, Z);
  input [7:0] A;
  input [1:0] B;
  output [7:0] Z;
  wire [7:0] A;
  wire [1:0] B;
  wire [7:0] Z;
  wire n_20, n_21, n_23, n_24, n_30, n_33, n_37, n_39;
  wire n_40, n_41, n_43, n_45, n_47, n_49, n_50, n_59;
  wire n_61, n_65, n_71, n_76, n_82, n_85, n_89, n_92;
  not g8 (n_30, B[1]);
  not g9 (n_33, B[0]);
  xor g1 (n_92, A[0], n_33);
  nand g4 (n_21, n_37, B[0]);
  nor g5 (n_20, A[1], n_30);
  nand g6 (n_23, A[1], n_30);
  not g19 (n_39, n_20);
  nand g20 (n_24, n_21, n_39);
  nand g21 (n_43, n_23, n_24);
  nor g24 (n_47, A[2], A[3]);
  nor g28 (n_49, A[4], A[5]);
  nand g36 (n_76, n_40, n_45);
  nand g38 (n_59, n_47, n_45);
  nor g41 (n_65, n_50, A[6]);
  nand g51 (n_82, n_41, n_61);
  nand g53 (n_85, n_49, n_61);
  nand g56 (n_89, n_65, n_61);
  nand g60 (n_71, n_39, n_23);
  xnor g61 (Z[1], n_21, n_71);
  xnor g63 (Z[2], n_43, A[2]);
  xnor g66 (Z[3], n_76, A[3]);
  xnor g68 (Z[4], n_59, A[4]);
  xnor g71 (Z[5], n_82, A[5]);
  xnor g73 (Z[6], n_85, A[6]);
  xnor g76 (Z[7], n_89, A[7]);
  not g78 (n_37, A[0]);
  not g80 (n_40, A[2]);
  not g82 (n_41, A[4]);
  not g86 (Z[0], n_92);
  not g87 (n_50, n_49);
  not g88 (n_45, n_43);
  not g89 (n_61, n_59);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_3(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  wire ctl;
  wire [1:0] in_0, in_1;
  wire [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_5(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module case_box(in_0, out_0);
  input [1:0] in_0;
  output [3:0] out_0;
  wire [1:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_15, n_23, n_24, n_25, n_26;
  nand g1 (n_9, n_23, n_24);
  nand g2 (n_25, in_0[0], n_24);
  nand g3 (n_26, n_23, in_0[1]);
  nand g4 (n_15, in_0[0], in_0[1]);
  not g5 (out_0[3], n_9);
  not g6 (out_0[2], n_25);
  not g7 (out_0[1], n_26);
  not g8 (out_0[0], n_15);
  not g11 (n_24, in_0[1]);
  not g12 (n_23, in_0[0]);
endmodule

module mux(ctl, in_0, in_1, in_2, in_3, z);
  input [3:0] ctl, in_0, in_1, in_2, in_3;
  output [3:0] z;
  wire [3:0] ctl, in_0, in_1, in_2, in_3;
  wire [3:0] z;
  CDN_mux4 g1(.sel0 (ctl[3]), .data0 (in_0[3]), .sel1 (ctl[2]), .data1
       (in_1[3]), .sel2 (ctl[1]), .data2 (in_2[3]), .sel3 (ctl[0]),
       .data3 (in_3[3]), .z (z[3]));
  CDN_mux4 g2(.sel0 (ctl[3]), .data0 (in_0[2]), .sel1 (ctl[2]), .data1
       (in_1[2]), .sel2 (ctl[1]), .data2 (in_2[2]), .sel3 (ctl[0]),
       .data3 (in_3[2]), .z (z[2]));
  CDN_mux4 g3(.sel0 (ctl[3]), .data0 (in_0[1]), .sel1 (ctl[2]), .data1
       (in_1[1]), .sel2 (ctl[1]), .data2 (in_2[1]), .sel3 (ctl[0]),
       .data3 (in_3[1]), .z (z[1]));
  CDN_mux4 g4(.sel0 (ctl[3]), .data0 (in_0[0]), .sel1 (ctl[2]), .data1
       (in_1[0]), .sel2 (ctl[1]), .data2 (in_2[0]), .sel3 (ctl[0]),
       .data3 (in_3[0]), .z (z[0]));
endmodule

module case_box_4(in_0, out_0);
  input [1:0] in_0;
  output [3:0] out_0;
  wire [1:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_15, n_23, n_24, n_25, n_26;
  nand g1 (n_9, n_23, n_24);
  nand g2 (n_25, in_0[0], n_24);
  nand g3 (n_26, n_23, in_0[1]);
  nand g4 (n_15, in_0[0], in_0[1]);
  not g5 (out_0[3], n_9);
  not g6 (out_0[2], n_25);
  not g7 (out_0[1], n_26);
  not g8 (out_0[0], n_15);
  not g11 (n_24, in_0[1]);
  not g12 (n_23, in_0[0]);
endmodule

module case_box_7(in_0, out_0);
  input [1:0] in_0;
  output [3:0] out_0;
  wire [1:0] in_0;
  wire [3:0] out_0;
  wire n_9, n_15, n_23, n_24, n_25, n_26;
  nand g1 (n_9, n_23, n_24);
  nand g2 (n_25, in_0[0], n_24);
  nand g3 (n_26, n_23, in_0[1]);
  nand g4 (n_15, in_0[0], in_0[1]);
  not g5 (out_0[3], n_9);
  not g6 (out_0[2], n_25);
  not g7 (out_0[1], n_26);
  not g8 (out_0[0], n_15);
  not g11 (n_24, in_0[1]);
  not g12 (n_23, in_0[0]);
endmodule

module mux_7(ctl, in_0, in_1, in_2, in_3, z);
  input [3:0] ctl;
  input [6:0] in_0, in_1, in_2, in_3;
  output [6:0] z;
  wire [3:0] ctl;
  wire [6:0] in_0, in_1, in_2, in_3;
  wire [6:0] z;
  CDN_mux4 g1(.sel0 (ctl[3]), .data0 (in_0[6]), .sel1 (ctl[2]), .data1
       (in_1[6]), .sel2 (ctl[1]), .data2 (in_2[6]), .sel3 (ctl[0]),
       .data3 (in_3[6]), .z (z[6]));
  CDN_mux4 g2(.sel0 (ctl[3]), .data0 (in_0[5]), .sel1 (ctl[2]), .data1
       (in_1[5]), .sel2 (ctl[1]), .data2 (in_2[5]), .sel3 (ctl[0]),
       .data3 (in_3[5]), .z (z[5]));
  CDN_mux4 g3(.sel0 (ctl[3]), .data0 (in_0[4]), .sel1 (ctl[2]), .data1
       (in_1[4]), .sel2 (ctl[1]), .data2 (in_2[4]), .sel3 (ctl[0]),
       .data3 (in_3[4]), .z (z[4]));
  CDN_mux4 g4(.sel0 (ctl[3]), .data0 (in_0[3]), .sel1 (ctl[2]), .data1
       (in_1[3]), .sel2 (ctl[1]), .data2 (in_2[3]), .sel3 (ctl[0]),
       .data3 (in_3[3]), .z (z[3]));
  CDN_mux4 g5(.sel0 (ctl[3]), .data0 (in_0[2]), .sel1 (ctl[2]), .data1
       (in_1[2]), .sel2 (ctl[1]), .data2 (in_2[2]), .sel3 (ctl[0]),
       .data3 (in_3[2]), .z (z[2]));
  CDN_mux4 g6(.sel0 (ctl[3]), .data0 (in_0[1]), .sel1 (ctl[2]), .data1
       (in_1[1]), .sel2 (ctl[1]), .data2 (in_2[1]), .sel3 (ctl[0]),
       .data3 (in_3[1]), .z (z[1]));
  CDN_mux4 g7(.sel0 (ctl[3]), .data0 (in_0[0]), .sel1 (ctl[2]), .data1
       (in_1[0]), .sel2 (ctl[1]), .data2 (in_2[0]), .sel3 (ctl[0]),
       .data3 (in_3[0]), .z (z[0]));
endmodule

module proj_extender(in_fragment, \in_kmer_indices[0] ,
     \in_kmer_indices[1] , \in_kmer_indices[2] , \in_kmer_indices[3] ,
     valid_indices, rst_n, clk, out_index, out_gfm);
  input [15:0] in_fragment;
  input [6:0] \in_kmer_indices[0] , \in_kmer_indices[1] ,
       \in_kmer_indices[2] , \in_kmer_indices[3] ;
  input valid_indices, rst_n, clk;
  output [7:0] out_index, out_gfm;
  wire [15:0] in_fragment;
  wire [6:0] \in_kmer_indices[0] , \in_kmer_indices[1] ,
       \in_kmer_indices[2] , \in_kmer_indices[3] ;
  wire valid_indices, rst_n, clk;
  wire [7:0] out_index, out_gfm;
  wire [0:0] frag_parts_idx;
  wire [1:0] indices_idx;
  wire [6:0] curr_index;
  wire [1:0] indices_idx_next;
  wire [3:0] frag_part;
  wire [6:0] \in_kmer_indices_r[0] ;
  wire [6:0] \in_kmer_indices_r[1] ;
  wire [6:0] \in_kmer_indices_r[2] ;
  wire [6:0] \in_kmer_indices_r[3] ;
  wire n_45, n_47, n_48, n_58, n_59, n_60, n_61, n_62;
  wire n_63, n_64, n_65, n_66, n_67, n_68, n_69, n_70;
  wire rst_frag_parts_idx;
  add_unsigned add_49_77(.A (frag_parts_idx), .B (1'b1), .Z (n_70));
  add_unsigned_2 add_70_64(.A (indices_idx), .B (1'b1), .Z ({n_48,
       n_47}));
  sub_unsigned sub_72_43(.A ({1'b0, curr_index}), .B (2'b10), .Z
       (out_index));
  bmux mux_47_49(.ctl (frag_parts_idx), .in_0 (1'b0), .in_1 (1'b1), .z
       (rst_frag_parts_idx));
  bmux_3 mux_70_31(.ctl (rst_frag_parts_idx), .in_0 (indices_idx),
       .in_1 ({n_48, n_47}), .z (indices_idx_next));
  bmux_5 mux_in_fragment_53_24(.ctl (frag_parts_idx), .in_0
       (in_fragment[3:0]), .in_1 (in_fragment[7:4]), .z (frag_part));
  case_box ctl_frag_part_58_23(.in_0 (frag_part[1:0]), .out_0 ({n_58,
       n_59, n_60, n_61}));
  mux mux_out_gfm_58_23(.ctl ({n_58, n_59, n_60, n_61}), .in_0 (4'b1),
       .in_1 (4'b10), .in_2 (4'b100), .in_3 (4'b1000), .z
       (out_gfm[3:0]));
  case_box_4 ctl_frag_part_58_12(.in_0 (frag_part[3:2]), .out_0 ({n_62,
       n_63, n_64, n_65}));
  mux mux_out_gfm_58_13(.ctl ({n_62, n_63, n_64, n_65}), .in_0 (4'b1),
       .in_1 (4'b10), .in_2 (4'b100), .in_3 (4'b1000), .z
       (out_gfm[7:4]));
  case_box_7 ctl_indices_idx_51_25(.in_0 (indices_idx), .out_0 ({n_66,
       n_67, n_68, n_69}));
  mux_7 \mux_in_kmer_indices_r[indices_idx]_51_25 (.ctl ({n_66, n_67,
       n_68, n_69}), .in_0 (\in_kmer_indices_r[0] ), .in_1
       (\in_kmer_indices_r[1] ), .in_2 (\in_kmer_indices_r[2] ), .in_3
       (\in_kmer_indices_r[3] ), .z (curr_index));
  not g1 (n_45, rst_n);
  CDN_flop \frag_parts_idx_reg[0] (.clk (clk), .d (n_70), .sena (1'b1),
       .aclr (n_45), .apre (1'b0), .srl (rst_frag_parts_idx), .srd
       (1'b0), .q (frag_parts_idx));
  CDN_flop \in_kmer_indices_r_reg[0][0] (.clk (clk), .d
       (\in_kmer_indices[0] [0]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [0]));
  CDN_flop \in_kmer_indices_r_reg[0][1] (.clk (clk), .d
       (\in_kmer_indices[0] [1]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [1]));
  CDN_flop \in_kmer_indices_r_reg[0][2] (.clk (clk), .d
       (\in_kmer_indices[0] [2]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [2]));
  CDN_flop \in_kmer_indices_r_reg[0][3] (.clk (clk), .d
       (\in_kmer_indices[0] [3]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [3]));
  CDN_flop \in_kmer_indices_r_reg[0][4] (.clk (clk), .d
       (\in_kmer_indices[0] [4]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [4]));
  CDN_flop \in_kmer_indices_r_reg[0][5] (.clk (clk), .d
       (\in_kmer_indices[0] [5]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [5]));
  CDN_flop \in_kmer_indices_r_reg[0][6] (.clk (clk), .d
       (\in_kmer_indices[0] [6]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[0] [6]));
  CDN_flop \in_kmer_indices_r_reg[1][0] (.clk (clk), .d
       (\in_kmer_indices[1] [0]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [0]));
  CDN_flop \in_kmer_indices_r_reg[1][1] (.clk (clk), .d
       (\in_kmer_indices[1] [1]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [1]));
  CDN_flop \in_kmer_indices_r_reg[1][2] (.clk (clk), .d
       (\in_kmer_indices[1] [2]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [2]));
  CDN_flop \in_kmer_indices_r_reg[1][3] (.clk (clk), .d
       (\in_kmer_indices[1] [3]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [3]));
  CDN_flop \in_kmer_indices_r_reg[1][4] (.clk (clk), .d
       (\in_kmer_indices[1] [4]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [4]));
  CDN_flop \in_kmer_indices_r_reg[1][5] (.clk (clk), .d
       (\in_kmer_indices[1] [5]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [5]));
  CDN_flop \in_kmer_indices_r_reg[1][6] (.clk (clk), .d
       (\in_kmer_indices[1] [6]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[1] [6]));
  CDN_flop \in_kmer_indices_r_reg[2][0] (.clk (clk), .d
       (\in_kmer_indices[2] [0]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [0]));
  CDN_flop \in_kmer_indices_r_reg[2][1] (.clk (clk), .d
       (\in_kmer_indices[2] [1]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [1]));
  CDN_flop \in_kmer_indices_r_reg[2][2] (.clk (clk), .d
       (\in_kmer_indices[2] [2]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [2]));
  CDN_flop \in_kmer_indices_r_reg[2][3] (.clk (clk), .d
       (\in_kmer_indices[2] [3]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [3]));
  CDN_flop \in_kmer_indices_r_reg[2][4] (.clk (clk), .d
       (\in_kmer_indices[2] [4]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [4]));
  CDN_flop \in_kmer_indices_r_reg[2][5] (.clk (clk), .d
       (\in_kmer_indices[2] [5]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [5]));
  CDN_flop \in_kmer_indices_r_reg[2][6] (.clk (clk), .d
       (\in_kmer_indices[2] [6]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[2] [6]));
  CDN_flop \in_kmer_indices_r_reg[3][0] (.clk (clk), .d
       (\in_kmer_indices[3] [0]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [0]));
  CDN_flop \in_kmer_indices_r_reg[3][1] (.clk (clk), .d
       (\in_kmer_indices[3] [1]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [1]));
  CDN_flop \in_kmer_indices_r_reg[3][2] (.clk (clk), .d
       (\in_kmer_indices[3] [2]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [2]));
  CDN_flop \in_kmer_indices_r_reg[3][3] (.clk (clk), .d
       (\in_kmer_indices[3] [3]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [3]));
  CDN_flop \in_kmer_indices_r_reg[3][4] (.clk (clk), .d
       (\in_kmer_indices[3] [4]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [4]));
  CDN_flop \in_kmer_indices_r_reg[3][5] (.clk (clk), .d
       (\in_kmer_indices[3] [5]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [5]));
  CDN_flop \in_kmer_indices_r_reg[3][6] (.clk (clk), .d
       (\in_kmer_indices[3] [6]), .sena (valid_indices), .aclr (1'b0),
       .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\in_kmer_indices_r[3] [6]));
  CDN_flop \indices_idx_reg[0] (.clk (clk), .d (indices_idx_next[0]),
       .sena (1'b1), .aclr (n_45), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (indices_idx[0]));
  CDN_flop \indices_idx_reg[1] (.clk (clk), .d (indices_idx_next[1]),
       .sena (1'b1), .aclr (n_45), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (indices_idx[1]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux4(sel0, data0, sel1, data1, sel2, data2, sel3, data3, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or data0 or data1 or data2 or data3) 
      case ({sel0, sel1, sel2, sel3})
       4'b1000: z = data0;
       4'b0100: z = data1;
       4'b0010: z = data2;
       4'b0001: z = data3;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux4(sel0, data0, sel1, data1, sel2, data2, sel3, data3, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3;
  wire z;
  wire w_0, w_1, w_2, w_3;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  or org (z, w_0, w_1, w_2, w_3);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
