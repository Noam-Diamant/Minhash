
// Generated by Cadence Genus(TM) Synthesis Solution 21.15-s080_1
// Generated on: Aug 11 2024 19:29:08 UTC (Aug 11 2024 19:29:08 UTC)

// Verification Directory fv/proj_counter 

module add_unsigned(A, B, Z);
  input [8:0] A;
  input B;
  output [8:0] Z;
  wire [8:0] A;
  wire B;
  wire [8:0] Z;
  wire n_20, n_24, n_27, n_29, n_33, n_35, n_39, n_41;
  wire n_45, n_46, n_48, n_49, n_51, n_55, n_57, n_62;
  wire n_64, n_65, n_66, n_67, n_69, n_70, n_71, n_73;
  wire n_75, n_79, n_84, n_90, n_93, n_97, n_100;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_20, A[0], B);
  nand g23 (n_27, n_24, A[1]);
  nor g28 (n_49, n_33, n_29);
  nor g32 (n_55, n_39, n_35);
  nor g36 (n_57, n_45, n_41);
  nand g38 (n_48, n_46, A[2]);
  nand g40 (n_51, n_49, n_46);
  nand g46 (n_66, n_55, A[6]);
  nand g51 (n_70, n_55, n_57);
  nand g53 (n_64, n_62, A[4]);
  nand g55 (n_65, n_55, n_62);
  not g57 (n_67, n_66);
  nand g58 (n_69, n_62, n_67);
  not g60 (n_71, n_70);
  nand g61 (n_73, n_62, n_71);
  xnor g67 (Z[1], n_24, n_79);
  xnor g69 (Z[2], n_46, n_33);
  xnor g72 (Z[3], n_84, n_29);
  xnor g74 (Z[4], n_62, n_39);
  xnor g77 (Z[5], n_90, n_35);
  xnor g79 (Z[6], n_93, n_45);
  xnor g82 (Z[7], n_97, n_41);
  xnor g84 (Z[8], n_75, n_100);
  not g87 (n_33, A[2]);
  not g88 (n_29, A[3]);
  not g89 (n_39, A[4]);
  not g90 (n_35, A[5]);
  not g91 (n_45, A[6]);
  not g92 (n_41, A[7]);
  not g94 (n_24, n_20);
  not g95 (n_79, A[1]);
  not g96 (n_100, A[8]);
  not g97 (n_46, n_27);
  not g98 (n_84, n_48);
  not g99 (n_62, n_51);
  not g100 (n_90, n_64);
  not g101 (n_93, n_65);
  not g102 (n_97, n_69);
  not g103 (n_75, n_73);
endmodule

module bmux_1(ctl, in_0, in_1, z);
  input ctl;
  input [8:0] in_0, in_1;
  output [8:0] z;
  wire ctl;
  wire [8:0] in_0, in_1;
  wire [8:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module proj_counter(index, finished_count, clk, rst_n, start);
  input clk, rst_n, start;
  output [8:0] index;
  output finished_count;
  wire clk, rst_n, start;
  wire [8:0] index;
  wire finished_count;
  wire [8:0] idx_next;
  wire count_enabled, n_44, n_46, n_47, n_48, n_50, n_52, n_54;
  wire n_56, n_58, n_60, n_62, n_64, n_66, n_68, n_69;
  wire n_70, n_71, n_72, n_73, n_74, n_75, n_76, n_86;
  wire n_88, n_89, n_90, n_92, n_93, n_94, n_116, n_130;
  wire n_131, n_132, rst_index, start_prev;
  add_unsigned add_27_67(.A (index), .B (1'b1), .Z ({n_64, n_62, n_60,
       n_58, n_56, n_54, n_52, n_50, n_48}));
  bmux_1 mux_27_38(.ctl (n_47), .in_0 (index), .in_1 ({n_64, n_62,
       n_60, n_58, n_56, n_54, n_52, n_50, n_48}), .z (idx_next));
  bmux_1 mux_out_index_46_32(.ctl (n_46), .in_0 (idx_next), .in_1
       (9'b0), .z ({n_76, n_75, n_74, n_73, n_72, n_71, n_70, n_69,
       n_68}));
  bmux mux_23_38(.ctl (n_66), .in_0 (1'b0), .in_1 (1'b1), .z
       (finished_count));
  not g1 (n_86, finished_count);
  and g2 (n_47, count_enabled, n_86);
  not g3 (n_44, rst_n);
  or g4 (rst_index, finished_count, n_44);
  not g5 (n_88, start_prev);
  and g6 (n_46, start, n_88);
  not g11 (n_89, n_46);
  not g15 (n_93, rst_index);
  and g16 (n_90, count_enabled, n_89);
  or g17 (n_92, n_90, n_46);
  and g18 (n_94, n_46, n_93);
  CDN_flop \out_index_reg[0] (.clk (clk), .d (n_68), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[0]));
  CDN_flop \out_index_reg[1] (.clk (clk), .d (n_69), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[1]));
  CDN_flop \out_index_reg[2] (.clk (clk), .d (n_70), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[2]));
  CDN_flop \out_index_reg[3] (.clk (clk), .d (n_71), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[3]));
  CDN_flop \out_index_reg[4] (.clk (clk), .d (n_72), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[4]));
  CDN_flop \out_index_reg[5] (.clk (clk), .d (n_73), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[5]));
  CDN_flop \out_index_reg[6] (.clk (clk), .d (n_74), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[6]));
  CDN_flop \out_index_reg[7] (.clk (clk), .d (n_75), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[7]));
  CDN_flop \out_index_reg[8] (.clk (clk), .d (n_76), .sena (n_92),
       .aclr (n_44), .apre (1'b0), .srl (rst_index), .srd (1'b0), .q
       (index[8]));
  CDN_flop count_enabled_reg(.clk (clk), .d (1'b0), .sena (1'b0), .aclr
       (n_44), .apre (1'b0), .srl (n_116), .srd (n_93), .q
       (count_enabled));
  or g36 (n_116, rst_index, n_94);
  CDN_flop start_prev_reg(.clk (clk), .d (start), .sena (1'b1), .aclr
       (n_44), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (start_prev));
  nand g47 (n_130, index[0], index[1], index[2], index[3]);
  nand g48 (n_131, index[4], index[5], index[6], index[7]);
  not g49 (n_132, index[8]);
  nor g50 (n_66, n_132, n_130, n_131);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
